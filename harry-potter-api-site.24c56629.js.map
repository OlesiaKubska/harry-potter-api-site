{"mappings":"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","sources":["<anon>","src/scripts/main.ts"],"sourcesContent":["\n\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    console.log(\"\\uD83E\\uDDD9\\u200D\\u2642\\uFE0F Welcome to the Harry Potter!\");\n    const btn = document.querySelector('.hero__btn');\n    const charactersSection = document.getElementById('characters');\n    const charactersContainer = document.querySelector('.characters-cards');\n    const filterButtons = document.querySelectorAll('.characters__btn');\n    const houseFilterContainer = document.querySelector('.characters-filters');\n    const houseFilterButtons = houseFilterContainer.querySelectorAll('.characters-filters__btn');\n    const charactersTitle = document.getElementById('characters-title');\n    const modal = document.getElementById('character-modal');\n    const modalBody = document.getElementById('modal-body');\n    const modalContent = document.querySelector('.modal__content');\n    const fetchCharacters = async ()=>{\n        try {\n            const response = await fetch('https://hp-api.onrender.com/api/characters');\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching characters:', error);\n            return [];\n        }\n    };\n    const fetchByHouse = async (house)=>{\n        try {\n            const response = await fetch(`https://hp-api.onrender.com/api/characters/house/${house}`);\n            return await response.json();\n        } catch (error) {\n            console.error(`Error fetching characters for ${house}:`, error);\n            return [];\n        }\n    };\n    const updateTitle = (group)=>{\n        const titles = {\n            students: \"\\u0421\\u0442\\u0443\\u0434\\u0435\\u043D\\u0442\\u0438 \\u0413\\u043E\\u0491\\u0432\\u043E\\u0440\\u0442\\u0441\\u0443\",\n            staff: \"\\u0421\\u043F\\u0456\\u0432\\u0440\\u043E\\u0431\\u0456\\u0442\\u043D\\u0438\\u043A\\u0438 \\u0413\\u043E\\u0491\\u0432\\u043E\\u0440\\u0442\\u0441\\u0443\",\n            house: \"\\u041F\\u0435\\u0440\\u0441\\u043E\\u043D\\u0430\\u0436\\u0456 \\u0432 \\u043F\\u0435\\u0432\\u043D\\u043E\\u043C\\u0443 \\u0431\\u0443\\u0434\\u0438\\u043D\\u043A\\u0443\"\n        };\n        charactersTitle.textContent = titles[group] || '';\n        charactersTitle.classList.remove('visually-hidden');\n    };\n    const renderCharacters = (characters)=>{\n        charactersContainer.innerHTML = '';\n        characters.forEach((character)=>{\n            const card = document.createElement('div');\n            card.classList.add('characters-cards__card');\n            card.innerHTML = `\n        <div class=\"characters-cards__image-wrap\">\n          <img src=\"${character.image}\" alt=\"${character.name}\" class=\"characters-cards__image\" />\n          <div class=\"characters-cards__gradient\">\n            <div class=\"characters-cards__info\">\n              <h3 class=\"characters-cards__name\">${character.name}</h3>\n              <p class=\"characters-cards__desc\">${character.alternate_names?.[0] || ''}</p>\n              <p class=\"characters-cards__house\">${character.house}</p>\n              <p class=\"characters-cards__dob\">${character.dateOfBirth}</p>\n              <button type=\"button\" class=\"characters-cards__button\" data-character='${JSON.stringify(character).replace(/'/g, \"&#39;\")}'>\n                \\u{411}\\u{456}\\u{43B}\\u{44C}\\u{448}\\u{435} \\u{456}\\u{43D}\\u{444}\\u{43E}\\u{440}\\u{43C}\\u{430}\\u{446}\\u{456}\\u{457}\n                <span class=\"characters-cards__span\">\n                  <span class=\"circle\"></span>\n                  <svg class=\"arrow-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n                    <path d=\"M2 12h28M24 6l6 6-6 6\" stroke=\"white\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                  </svg>\n                </span> \n              </button>\n            </div>\n          </div>\n        </div>\n      `;\n            charactersContainer.appendChild(card);\n        });\n    };\n    btn.addEventListener('click', ()=>{\n        charactersSection.classList.remove('hidden');\n        btn.disabled = true;\n    });\n    filterButtons.forEach((button)=>{\n        button.addEventListener('click', async ()=>{\n            const group = button.getAttribute('data-group');\n            const characters = await fetchCharacters();\n            if (!group) return;\n            updateTitle(group);\n            let filteredCharacters = [];\n            if (group === 'students') {\n                filteredCharacters = characters.filter((char)=>char.hogwartsStudent);\n                houseFilterContainer.classList.add('hidden');\n            } else if (group === 'staff') {\n                filteredCharacters = characters.filter((char)=>char.hogwartsStaff);\n                houseFilterContainer.classList.add('hidden');\n            } else if (group === 'house') {\n                filteredCharacters = characters;\n                houseFilterContainer.classList.remove('hidden');\n            }\n            renderCharacters(filteredCharacters);\n        });\n    });\n    houseFilterButtons.forEach((btn)=>{\n        btn.addEventListener('click', async ()=>{\n            const house = btn.getAttribute('data-house');\n            if (!house) return;\n            const characters = await fetchByHouse(house);\n            renderCharacters(characters);\n            houseFilterButtons.forEach((b)=>b.closest('.characters-filters__item')?.classList.remove('characters-filters__item--active'));\n            btn.closest('.characters-filters__item')?.classList.add('characters-filters__item--active');\n        });\n    });\n    modal.addEventListener('click', (event)=>{\n        if (!modalContent.contains(event.target)) modal.classList.add('hidden');\n    });\n    charactersContainer.addEventListener('click', (e)=>{\n        const btn = e.target.closest('.characters-cards__button');\n        if (!btn) return;\n        const characterData = btn.getAttribute('data-character');\n        if (!characterData) return;\n        const character = JSON.parse(characterData);\n        modalBody.innerHTML = `\n    <p><strong>Name:</strong> ${character.name}</p>\n    <p><strong>Alternate names:</strong> ${character.alternate_names?.join(', ') || 'None'}</p>\n    <p><strong>Species:</strong> ${character.species || 'Unknown'}</p>\n    <p><strong>Gender:</strong> ${character.gender || 'Unknown'}</p>\n    <p><strong>House:</strong> ${character.house || 'Unknown'}</p>\n    <p><strong>Date of birth:</strong> ${character.dateOfBirth || 'Unknown'}</p>\n    <p><strong>Year of birth:</strong> ${character.yearOfBirth || 'Unknown'}</p>\n    <p><strong>Wizard:</strong> ${character.wizard ? 'True' : 'False'}</p>\n    <p><strong>Ancestry:</strong> ${character.ancestry || 'Unknown'}</p>\n    <p><strong>Eye colour:</strong> ${character.eyeColour || 'Unknown'}</p>\n    <p><strong>Hair colour:</strong> ${character.hairColour || 'Unknown'}</p>\n    <p><strong>Wand:</strong> ${character.wand?.wood || '-'}, ${character.wand?.core || '-'}, length: ${character.wand?.length || '-'}</p>\n    <p><strong>Patronus:</strong> ${character.patronus || 'None'}</p>\n    <p><strong>Hogwarts student:</strong> ${character.hogwartsStudent ? 'True' : 'False'}</p>\n    <p><strong>Hogwarts staff:</strong> ${character.hogwartsStaff ? 'True' : 'False'}</p>\n    <p><strong>Actor:</strong> ${character.actor || 'Unknown'}</p>\n    <p><strong>Alive:</strong> ${character.alive ? 'True' : 'False'}</p>\n  `;\n        modal.classList.remove('hidden');\n    });\n});\n\n\n//# sourceMappingURL=harry-potter-api-site.24c56629.js.map\n","import '../scss/main.scss';\r\nimport '../images/svg/icons.svg';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  console.log('🧙‍♂️ Welcome to the Harry Potter!');\r\n\r\n  const btn = document.querySelector('.hero__btn') as HTMLButtonElement;\r\n  const charactersSection = document.getElementById('characters') as HTMLElement;\r\n  const charactersContainer = document.querySelector('.characters-cards') as HTMLElement;\r\n  const filterButtons = document.querySelectorAll('.characters__btn');\r\n  const houseFilterContainer = document.querySelector('.characters-filters') as HTMLElement;\r\n  const houseFilterButtons = houseFilterContainer.querySelectorAll('.characters-filters__btn');\r\n  const charactersTitle = document.getElementById('characters-title') as HTMLElement;\r\n  const modal = document.getElementById('character-modal') as HTMLElement;\r\n  const modalBody = document.getElementById('modal-body') as HTMLElement;\r\n  const modalContent = document.querySelector('.modal__content') as HTMLElement;\r\n\r\n  interface Character {\r\n    name: string;\r\n    image: string;\r\n    house: string;\r\n    hogwartsStudent: boolean;\r\n    hogwartsStaff: boolean;\r\n    dateOfBirth: string;\r\n    alternate_names: string[];\r\n  }\r\n\r\n  const fetchCharacters = async (): Promise<Character[]> => {\r\n    try {\r\n      const response = await fetch('https://hp-api.onrender.com/api/characters');\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching characters:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const fetchByHouse = async (house: string): Promise<Character[]> => {\r\n    try {\r\n      const response = await fetch(`https://hp-api.onrender.com/api/characters/house/${house}`);\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching characters for ${house}:`, error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const updateTitle = (group: string) => {\r\n    const titles: Record<string, string> = {\r\n      students: 'Студенти Гоґвортсу',\r\n      staff: 'Співробітники Гоґвортсу',\r\n      house: 'Персонажі в певному будинку',\r\n    };\r\n    charactersTitle.textContent = titles[group] || '';\r\n    charactersTitle.classList.remove('visually-hidden');\r\n  };\r\n\r\n  const renderCharacters = (characters: Character[]) => {\r\n    charactersContainer.innerHTML = '';\r\n    characters.forEach((character) => {\r\n      const card = document.createElement('div');\r\n      card.classList.add('characters-cards__card');\r\n\r\n      card.innerHTML = `\r\n        <div class=\"characters-cards__image-wrap\">\r\n          <img src=\"${character.image}\" alt=\"${character.name}\" class=\"characters-cards__image\" />\r\n          <div class=\"characters-cards__gradient\">\r\n            <div class=\"characters-cards__info\">\r\n              <h3 class=\"characters-cards__name\">${character.name}</h3>\r\n              <p class=\"characters-cards__desc\">${character.alternate_names?.[0] || ''}</p>\r\n              <p class=\"characters-cards__house\">${character.house}</p>\r\n              <p class=\"characters-cards__dob\">${character.dateOfBirth}</p>\r\n              <button type=\"button\" class=\"characters-cards__button\" data-character='${JSON.stringify(character).replace(/'/g, \"&#39;\")}'>\r\n                Більше інформації\r\n                <span class=\"characters-cards__span\">\r\n                  <span class=\"circle\"></span>\r\n                  <svg class=\"arrow-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\r\n                    <path d=\"M2 12h28M24 6l6 6-6 6\" stroke=\"white\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                  </svg>\r\n                </span> \r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n      charactersContainer.appendChild(card);\r\n    });\r\n  };\r\n\r\n  btn.addEventListener('click', () => {\r\n    charactersSection.classList.remove('hidden');\r\n    btn.disabled = true;\r\n  });\r\n\r\n  filterButtons.forEach((button) => {\r\n    button.addEventListener('click', async () => {\r\n      const group = button.getAttribute('data-group');\r\n      const characters = await fetchCharacters();\r\n\r\n      if (!group) return;\r\n      updateTitle(group);\r\n\r\n      let filteredCharacters: Character[] = [];\r\n\r\n      if (group === 'students') {\r\n        filteredCharacters = characters.filter((char) => char.hogwartsStudent);\r\n        houseFilterContainer.classList.add('hidden');\r\n      } else if (group === 'staff') {\r\n        filteredCharacters = characters.filter((char) => char.hogwartsStaff);\r\n        houseFilterContainer.classList.add('hidden');\r\n      } else if (group === 'house') {\r\n        filteredCharacters = characters;\r\n        houseFilterContainer.classList.remove('hidden');\r\n      }\r\n\r\n      renderCharacters(filteredCharacters);\r\n    });\r\n  });\r\n\r\n  houseFilterButtons.forEach((btn) => {\r\n    btn.addEventListener('click', async () => {\r\n      const house = btn.getAttribute('data-house');\r\n      if (!house) return;\r\n\r\n      const characters = await fetchByHouse(house);\r\n      renderCharacters(characters);\r\n\r\n      houseFilterButtons.forEach((b) =>\r\n        b.closest('.characters-filters__item')?.classList.remove('characters-filters__item--active')\r\n      );\r\n\r\n      btn.closest('.characters-filters__item')?.classList.add('characters-filters__item--active');\r\n    });\r\n  });\r\n\r\n  modal.addEventListener('click', (event: MouseEvent) => {\r\n    if (!modalContent.contains(event.target as Node)) {\r\n      modal.classList.add('hidden');\r\n    }\r\n  });\r\n\r\n  charactersContainer.addEventListener('click', (e) => {\r\n    const btn = (e.target as HTMLElement).closest('.characters-cards__button') as HTMLButtonElement;\r\n  if (!btn) return;\r\n\r\n  const characterData = btn.getAttribute('data-character');\r\n  if (!characterData) return;\r\n\r\n  const character = JSON.parse(characterData);\r\n\r\n  modalBody.innerHTML = `\r\n    <p><strong>Name:</strong> ${character.name}</p>\r\n    <p><strong>Alternate names:</strong> ${character.alternate_names?.join(', ') || 'None'}</p>\r\n    <p><strong>Species:</strong> ${character.species || 'Unknown'}</p>\r\n    <p><strong>Gender:</strong> ${character.gender || 'Unknown'}</p>\r\n    <p><strong>House:</strong> ${character.house || 'Unknown'}</p>\r\n    <p><strong>Date of birth:</strong> ${character.dateOfBirth || 'Unknown'}</p>\r\n    <p><strong>Year of birth:</strong> ${character.yearOfBirth || 'Unknown'}</p>\r\n    <p><strong>Wizard:</strong> ${character.wizard ? 'True' : 'False'}</p>\r\n    <p><strong>Ancestry:</strong> ${character.ancestry || 'Unknown'}</p>\r\n    <p><strong>Eye colour:</strong> ${character.eyeColour || 'Unknown'}</p>\r\n    <p><strong>Hair colour:</strong> ${character.hairColour || 'Unknown'}</p>\r\n    <p><strong>Wand:</strong> ${character.wand?.wood || '-'}, ${character.wand?.core || '-'}, length: ${character.wand?.length || '-'}</p>\r\n    <p><strong>Patronus:</strong> ${character.patronus || 'None'}</p>\r\n    <p><strong>Hogwarts student:</strong> ${character.hogwartsStudent ? 'True' : 'False'}</p>\r\n    <p><strong>Hogwarts staff:</strong> ${character.hogwartsStaff ? 'True' : 'False'}</p>\r\n    <p><strong>Actor:</strong> ${character.actor || 'Unknown'}</p>\r\n    <p><strong>Alive:</strong> ${character.alive ? 'True' : 'False'}</p>\r\n  `;\r\n\r\n  modal.classList.remove('hidden');\r\n    }\r\n  );\r\n});\r\n"],"names":["document","addEventListener","console","log","btn","querySelector","charactersSection","getElementById","charactersContainer","filterButtons","querySelectorAll","houseFilterContainer","houseFilterButtons","charactersTitle","modal","modalBody","modalContent","fetchCharacters","response","fetch","json","error","fetchByHouse","house","updateTitle","group","textContent","titles","students","staff","classList","remove","renderCharacters","characters","innerHTML","forEach","character","card","createElement","add","image","name","alternate_names","dateOfBirth","JSON","stringify","replace","appendChild","disabled","button","getAttribute","filteredCharacters","filter","char","hogwartsStudent","hogwartsStaff","b","closest","event","contains","target","e","characterData","parse","join","species","gender","yearOfBirth","wizard","ancestry","eyeColour","hairColour","wand","wood","core","length","patronus","actor","alive"],"version":3,"file":"harry-potter-api-site.24c56629.js.map"}